dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/main.c)
AM_INIT_AUTOMAKE(qsheff-II, 2.1-r3)
AM_CONFIG_HEADER(src/qsheff-config.h)
AC_PREFIX_DEFAULT([/usr/local])
if test "x${prefix}" = "xNONE"; then
  prefix=${ac_default_prefix}
fi
AC_ISC_POSIX

CFLAGS=""

AC_SUBST(CFLAGS)
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC


echo 

AC_PATH_PROG( [RIPMIME], [ripmime], [FALSE], [$PATH])
if test "x${RIPMIME}" = "xFALSE"; then
	AC_MSG_ERROR([ripmime not found])
fi
AC_SUBST(RIPMIME)

# Library depends
AC_SEARCH_LIBS([gethostbyname], [nsl])
AC_SEARCH_LIBS(connect, [inet])
AC_SEARCH_LIBS(setsockopt, [socket net])
AC_SEARCH_LIBS([socket], [socket], ,
    [AC_CHECK_LIB([nsl], [socket], LIBS="$LIBS -lsocket -lnsl", , -lsocket)])
AC_CHECK_FUNCS(strcasestr, [], [AC_DEFINE(NOSTRCASESTR, 1, [there is no strcasestr])])

dnl Conditional variables
AM_CONDITIONAL(ENABLE_CLAMAV, test "$with_clamav")
AM_CONDITIONAL(ENABLE_CPROG, test "$with_clamav")
AM_CONDITIONAL(ENABLE_DEBUG, test "$enable_debug" = yes)


dnl *********************************************
dnl ***           Optional Features           ***
dnl *********************************************

AC_MSG_CHECKING(for debug mode)
AC_ARG_ENABLE(debug,
[  --enable-debug                 Enable debug messages],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(_DEBUG_, 1, [Enable debug mode])
],
[
	AC_MSG_RESULT(disabled)
])


AC_MSG_CHECKING(for local filters)
AC_ARG_ENABLE(local_users,
[  --disable-local-users          Disable the filters for local users],
[
	AC_MSG_RESULT(disabled)
],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(ENABLE_LOCAL_USERS, 1, [Enable the filters for local users])
])


AC_MSG_CHECKING(for syslog)
AC_ARG_ENABLE(syslog,
[  --enable-syslog                Enable syslog messages],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(ENABLE_SYSLOG, 1, [Enable syslog messages])
],
[
	AC_MSG_RESULT(disabled)
])


AC_MSG_CHECKING(for backup mode)
AC_ARG_ENABLE(backup,
[  --enable-backup                Enable backup],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(BACKUP_ALL, 1, [Backup Enabled])
],
[   AC_MSG_RESULT(disabled)
])


AC_MSG_CHECKING(for spam tagging)
AC_ARG_ENABLE(spam_tag,
[  --enable-spam-tag              Enable Spam Tagging],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(SPAM_TAGGING, 1, [Spam tag enabled])
],
[   AC_MSG_RESULT(disabled)
])


AC_MSG_CHECKING(for virus tagging)
AC_ARG_ENABLE(virus_tag,
[  --enable-virus-tag             Enable virus tagging],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(VIRUS_TAGGING, 1, [Virus tag enabled])
],
[   AC_MSG_RESULT(disabled)
])


AC_MSG_CHECKING(for custom error patch)
AC_ARG_ENABLE(custom_error,
[  --enable-custom-error          Enable the custom error patch],
[
	AC_MSG_RESULT(enabled)
	AC_DEFINE(CUSTOM_ERROR, 1, [Return custom messages to senders])
],
[   AC_MSG_RESULT(disabled)
])




AC_MSG_CHECKING(for maximum body line)
AC_ARG_WITH(max_bodyline,
[  --with-max-bodyline            Maximum number of lines to filter, default=40],
[
	AC_MSG_RESULT(${with_max_bodyline})
	MAXBODYLINE=${with_max_bodyline}
	AC_DEFINE_UNQUOTED(MAXBODYLINE, $MAXBODYLINE,[max body lines])
],
[   AC_MSG_RESULT(40)
	MAXBODYLINE=40
	AC_DEFINE_UNQUOTED(MAXBODYLINE, $MAXBODYLINE,[max body lines])
])


AC_MSG_CHECKING(for maximum files)
AC_ARG_WITH(maxfiles,
[  --with-maxfiles                Maximum numbers of files in a dir. (OS limit), default=32000],
[
	AC_MSG_RESULT(${with_maxfiles})
	MAX_FILES=${with_maxfiles}
	AC_DEFINE_UNQUOTED(MAX_FILES, $MAX_FILES,[max files])
],
[   AC_MSG_RESULT(32000)
	MAX_FILES=32000
	AC_DEFINE_UNQUOTED(MAX_FILES, $MAX_FILES,[max files])
])


AC_MSG_CHECKING(for qq patch)
AC_ARG_ENABLE(qq_patch,
[  --enable-qq-patch              Enable qmailqueue patch],
[
	AC_MSG_RESULT(enabled)
	QMAILQUEUE=1
	AC_DEFINE(QMAILQUEUE, 1, [use qmailqueue patch])
],
[   AC_MSG_RESULT(disabled)
	QMAILQUEUE=0
])


AC_MSG_CHECKING(for qmailgroup)
AC_ARG_WITH(qmailgroup,
[  --with-qmailgroup              Define qmail group, default=qmail],
[
	AC_MSG_RESULT(${with_qmailgroup})
	QMAILGROUP=${with_qmailgroup}
	AC_SUBST(QMAILGROUP)
],
[   AC_MSG_RESULT(qmail)
	QMAILGROUP="qmail"
	AC_SUBST(QMAILGROUP)
])


AC_MSG_CHECKING(for qmail root directory)
AC_ARG_WITH(qmaildir,
[  --with-qmaildir                Define qmail directory, default=/var/qmail],
[
	AC_MSG_RESULT(${with_qmaildir})
	QMAILDIR=${with_qmaildir}
	AC_SUBST(QMAILDIR)
	AC_DEFINE_UNQUOTED(QMAILDIR, "$QMAILDIR",[qmail root directory])
],
[ AC_MSG_RESULT(/var/qmail)
	QMAILDIR="/var/qmail"
	AC_SUBST(QMAILDIR)
	AC_DEFINE_UNQUOTED(QMAILDIR, "$QMAILDIR",[qmail root directory])
])


AC_MSG_CHECKING(for ClamAv antivirus)
AC_ARG_WITH(clamav,
[  --with-clamav                  Enable ClamAv and define ClamAv installation prefix, default=/usr],
[
	if test x"$withval" != xyes; then
		AC_MSG_RESULT(${with_clamav})
		CFLAGS="$CFLAGS -I${with_clamav}/include -L${with_clamav}/lib"
	else
		AC_MSG_RESULT(default)
	fi
	AC_DEFINE(ENABLE_CLAMAV, 1, [use clamav])
	ENABLE_CLAMD=1
	AC_SUBST(ENABLE_CLAMD)
],
[
	AC_MSG_RESULT(disabled)
	ENABLE_CLAMD=0
])


AC_MSG_CHECKING(for clamd socket path)
AC_ARG_WITH(clamd-socket,
[  --with-clamd-socket            Path to clamd socket, default=/tmp/clamd],
[
	AC_MSG_RESULT(${with_clamd_socket})
	CLAMD_SOCKET=${with_clamd_socket}
	AC_DEFINE_UNQUOTED(CLAMD_SOCKET, "$CLAMD_SOCKET",[clamd socket])
],
[   AC_MSG_RESULT(/tmp/clamd)
	CLAMD_SOCKET=/tmp/clamd
	AC_DEFINE_UNQUOTED(CLAMD_SOCKET, "$CLAMD_SOCKET",[clamd socket])
])

AC_MSG_CHECKING(for custom prog)
AC_ARG_WITH(custom-prog,
[  --with-custom-prog             Enable User Defined Program, check qsheff.conf],
[
	AC_MSG_RESULT(enabled)
	CUSTOM_PROG="${with_custom_prog}"
	ENABLE_CUSTOM_PROG=1
	AC_DEFINE_UNQUOTED(ENABLE_CUSTOM_PROG, 1, [Enable custom program])
],
[
	AC_MSG_RESULT(disabled);
	CUSTOM_PROG="disabled"
	ENABLE_CUSTOM_PROG=0
])


echo


AC_SUBST(ENABLE_CLAMD)
AC_SUBST(QUEUE_PROGRAM)
AC_SUBST(CUSTOM_PROG)
AC_SUBST(QMAILQUEUE)
AC_SUBST(ENABLE_CUSTOM_PROG)

config_dir=`echo $sysconfdir | grep prefix`

if test -n "$config_dir"; then
    if test "$prefix" = "NONE"
    then
        config_dir="$ac_default_prefix/etc"
    else
        config_dir="$prefix/etc"
    fi
else
    config_dir="$sysconfdir"
fi

config_dir="$config_dir/$PACKAGE"
domain=`cat ${QMAILDIR}/control/me`
QUEUE_PROGRAM="${QMAILDIR}/bin/qmail-queue.orig"

AC_DEFINE_UNQUOTED(CFGFILE, "$config_dir/qsheff.conf",[qsheff.conf full path])
AC_DEFINE_UNQUOTED(IGNLISTFILE, "$config_dir/qsheff.ignore",[qsheff.ignore full path])
AC_DEFINE_UNQUOTED(ATTACHFILE, "$config_dir/qsheff.attach",[qsheff.attach full path])
AC_DEFINE_UNQUOTED(RULEFILE, "$config_dir/qsheff.rules",[qsheff.rules full path])
AC_DEFINE_UNQUOTED(MAILERDAEMON, "MAILER-DAEMON@${domain}",[Mailer-daemon email address])

AC_OUTPUT([
Makefile
src/Makefile
etc/install-wrapper.sh
etc/uninstall-wrapper.sh
etc/Makefile
etc/qsheff.conf-default
contrib/Makefile
doc/Makefile
samples/Makefile
])

echo
echo "Type 'make && make install' to install files."
echo
